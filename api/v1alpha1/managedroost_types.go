package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json:"-" or json:"fieldName,omitempty"

// ManagedRoostSpec defines the desired state of ManagedRoost
type ManagedRoostSpec struct {
	// HelmChart specifies the Helm chart to manage
	HelmChart HelmChartSpec `json:"helmChart"`

	// HealthChecks defines the health check configuration
	HealthChecks HealthCheckSpec `json:"healthChecks"`

	// Namespace specifies the target namespace for the Helm deployment
	// +optional
	Namespace string `json:"namespace,omitempty"`
}

// HelmChartSpec defines the Helm chart configuration
type HelmChartSpec struct {
	// Repository is the Helm repository URL
	Repository string `json:"repository"`

	// Chart is the name of the Helm chart
	Chart string `json:"chart"`

	// Version is the version of the Helm chart
	Version string `json:"version"`

	// Values are the Helm values to use for the deployment as raw JSON
	// +optional
	Values string `json:"values,omitempty"`
}

// HealthCheckSpec defines the health check configuration
type HealthCheckSpec struct {
	// Enabled specifies whether health checks are enabled
	Enabled bool `json:"enabled"`

	// HTTP health check configuration
	// +optional
	HTTP *HTTPHealthCheck `json:"http,omitempty"`
}

// HTTPHealthCheck defines HTTP-based health checking
type HTTPHealthCheck struct {
	// Path is the HTTP path to check
	Path string `json:"path"`

	// Port is the port to check
	Port int32 `json:"port"`

	// Scheme is the HTTP scheme (HTTP or HTTPS)
	// +optional
	Scheme string `json:"scheme,omitempty"`
}

// ManagedRoostStatus defines the observed state of ManagedRoost
type ManagedRoostStatus struct {
	// Phase represents the current phase of the ManagedRoost
	Phase ManagedRoostPhase `json:"phase,omitempty"`

	// Conditions represent the current service state
	Conditions []metav1.Condition `json:"conditions,omitempty"`

	// ObservedGeneration reflects the generation most recently observed by the controller
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// LastReconcileTime is the last time the resource was reconciled
	LastReconcileTime metav1.Time `json:"lastReconcileTime,omitempty"`
}

// ManagedRoostPhase defines the phase of a ManagedRoost
type ManagedRoostPhase string

const (
	// ManagedRoostPhasePending indicates the ManagedRoost is pending
	ManagedRoostPhasePending ManagedRoostPhase = "Pending"
	// ManagedRoostPhaseDeploying indicates the ManagedRoost is being deployed
	ManagedRoostPhaseDeploying ManagedRoostPhase = "Deploying"
	// ManagedRoostPhaseReady indicates the ManagedRoost is ready
	ManagedRoostPhaseReady ManagedRoostPhase = "Ready"
	// ManagedRoostPhaseFailed indicates the ManagedRoost has failed
	ManagedRoostPhaseFailed ManagedRoostPhase = "Failed"
)

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:resource:scope=Namespaced
//+kubebuilder:printcolumn:name="Phase",type="string",JSONPath=".status.phase"
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"

// ManagedRoost is the Schema for the managedroosts API
type ManagedRoost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ManagedRoostSpec   `json:"spec,omitempty"`
	Status ManagedRoostStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// ManagedRoostList contains a list of ManagedRoost
type ManagedRoostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedRoost `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedRoost) DeepCopyInto(out *ManagedRoost) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedRoost.
func (in *ManagedRoost) DeepCopy() *ManagedRoost {
	if in == nil {
		return nil
	}
	out := new(ManagedRoost)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedRoost) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedRoostList) DeepCopyInto(out *ManagedRoostList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedRoost, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedRoostList.
func (in *ManagedRoostList) DeepCopy() *ManagedRoostList {
	if in == nil {
		return nil
	}
	out := new(ManagedRoostList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedRoostList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedRoostSpec) DeepCopyInto(out *ManagedRoostSpec) {
	*out = *in
	in.HelmChart.DeepCopyInto(&out.HelmChart)
	in.HealthChecks.DeepCopyInto(&out.HealthChecks)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedRoostSpec.
func (in *ManagedRoostSpec) DeepCopy() *ManagedRoostSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedRoostSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedRoostStatus) DeepCopyInto(out *ManagedRoostStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.LastReconcileTime.DeepCopyInto(&out.LastReconcileTime)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedRoostStatus.
func (in *ManagedRoostStatus) DeepCopy() *ManagedRoostStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedRoostStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HelmChartSpec) DeepCopyInto(out *HelmChartSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HelmChartSpec.
func (in *HelmChartSpec) DeepCopy() *HelmChartSpec {
	if in == nil {
		return nil
	}
	out := new(HelmChartSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HealthCheckSpec) DeepCopyInto(out *HealthCheckSpec) {
	*out = *in
	if in.HTTP != nil {
		in, out := &in.HTTP, &out.HTTP
		*out = new(HTTPHealthCheck)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HealthCheckSpec.
func (in *HealthCheckSpec) DeepCopy() *HealthCheckSpec {
	if in == nil {
		return nil
	}
	out := new(HealthCheckSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPHealthCheck) DeepCopyInto(out *HTTPHealthCheck) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPHealthCheck.
func (in *HTTPHealthCheck) DeepCopy() *HTTPHealthCheck {
	if in == nil {
		return nil
	}
	out := new(HTTPHealthCheck)
	in.DeepCopyInto(out)
	return out
}

func init() {
	SchemeBuilder.Register(&ManagedRoost{}, &ManagedRoostList{})
}

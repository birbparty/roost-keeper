name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.24"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21", "1.22", "1.23", "1.24"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: make test-unit

    - name: Upload unit test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage-unit.out
        flags: unit
        name: unit-${{ matrix.go-version }}

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Set up Kind cluster
      uses: helm/kind-action@v1
      with:
        version: v0.20.0
        kubectl_version: v1.28.0
        cluster_name: roost-keeper-test

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.13.0'

    - name: Download dependencies
      run: go mod download

    - name: Install CRDs
      run: make install-crd

    - name: Run integration tests
      run: make test-integration

    - name: Upload integration test coverage
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage-integration.out
        flags: integration
        name: integration

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.55.2
        args: --timeout=5m

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Check imports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "Imports are not organized properly:"
          goimports -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Build manager binary
      run: make build

    - name: Build CLI binary
      run: |
        go build -o bin/roost ./cmd/roost/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/
        retention-days: 30

  crd-validation:
    name: CRD Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Generate CRDs
      run: make manifests

    - name: Validate CRDs
      run: make validate-crd

    - name: Check for uncommitted changes
      run: |
        if [ "$(git status --porcelain | wc -l)" -gt 0 ]; then
          echo "Uncommitted changes found after CRD generation:"
          git status --porcelain
          git diff
          exit 1
        fi

  helm-validation:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.13.0'

    - name: Lint Helm chart
      run: |
        helm lint helm/roost-keeper/

    - name: Template Helm chart
      run: |
        helm template test-release helm/roost-keeper/ \
          --values helm/roost-keeper/values-development.yaml \
          --dry-run

    - name: Template production values
      run: |
        helm template test-release helm/roost-keeper/ \
          --values helm/roost-keeper/values-production.yaml \
          --dry-run

  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: make test

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=cover.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        THRESHOLD=80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        fi
        echo "Coverage check passed!"

    - name: Upload final coverage report
      uses: codecov/codecov-action@v5
      with:
        file: ./cover.out
        flags: combined
        name: combined-coverage

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, integration-test, lint, build, crd-validation, helm-validation, coverage-check]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        if [[ "${{ needs.test.result }}" != "success" || \
              "${{ needs.integration-test.result }}" != "success" || \
              "${{ needs.lint.result }}" != "success" || \
              "${{ needs.build.result }}" != "success" || \
              "${{ needs.crd-validation.result }}" != "success" || \
              "${{ needs.helm-validation.result }}" != "success" || \
              "${{ needs.coverage-check.result }}" != "success" ]]; then
          echo "One or more required jobs failed"
          exit 1
        fi
        echo "All required jobs passed!"

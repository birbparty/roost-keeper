apiVersion: v1
kind: Namespace
metadata:
  name: roost-keeper-system
  labels:
    app.kubernetes.io/name: roost-keeper
    app.kubernetes.io/component: system
    app.kubernetes.io/part-of: roost-keeper
    app.kubernetes.io/managed-by: kustomize
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: roost-keeper-controller-manager
  namespace: roost-keeper-system
  labels:
    app.kubernetes.io/name: roost-keeper
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/part-of: roost-keeper
    app.kubernetes.io/managed-by: kustomize
    control-plane: controller-manager
spec:
  selector:
    matchLabels:
      control-plane: controller-manager
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: roost-keeper
        app.kubernetes.io/component: controller-manager
        app.kubernetes.io/part-of: roost-keeper
        app.kubernetes.io/version: "v0.1.0"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: roost-keeper-controller-manager
      terminationGracePeriodSeconds: 30
      containers:
      - name: manager
        image: roost-keeper:latest
        imagePullPolicy: IfNotPresent
        command:
        - /manager
        args:
        - --leader-elect
        - --metrics-secure=true
        - --enable-http2=false
        - --max-concurrent-reconciles=10
        - --cache-sync-period=10m
        - --webhook-port=9443
        - --webhook-cert-dir=/tmp/k8s-webhook-server/serving-certs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - "ALL"
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
          requests:
            cpu: 10m
            memory: 64Mi
            ephemeral-storage: 100Mi
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        - containerPort: 8080
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: health-probe
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        - mountPath: /tmp
          name: tmp
        - mountPath: /observability
          name: observability-data
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: OTEL_SERVICE_NAME
          value: "roost-keeper-manager"
        - name: OTEL_SERVICE_VERSION
          value: "v0.1.0"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=roost-keeper,service.version=v0.1.0,service.namespace=roost.birb.party,k8s.namespace.name=$(POD_NAMESPACE),k8s.pod.name=$(POD_NAME),k8s.node.name=$(NODE_NAME)"
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-certs
          optional: true
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: observability-data
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: control-plane
                  operator: In
                  values:
                  - controller-manager
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  name: roost-keeper-controller-manager-metrics-service
  namespace: roost-keeper-system
  labels:
    app.kubernetes.io/name: roost-keeper
    app.kubernetes.io/component: controller-manager
    app.kubernetes.io/part-of: roost-keeper
    app.kubernetes.io/managed-by: kustomize
    control-plane: controller-manager
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: 8080
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  name: roost-keeper-webhook-service
  namespace: roost-keeper-system
  labels:
    app.kubernetes.io/name: roost-keeper
    app.kubernetes.io/component: webhook
    app.kubernetes.io/part-of: roost-keeper
    app.kubernetes.io/managed-by: kustomize
spec:
  type: ClusterIP
  ports:
  - name: webhook
    port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
